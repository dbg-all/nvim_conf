--Lazy
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Plugins
local plugins = {
	-- {
	-- 	-- :TELESCOPE
	-- 	'nvim-telescope/telescope.nvim', tag = '0.1.8',
	-- 	dependencies = { 'nvim-lua/plenary.nvim' }
	-- },
	-- :CATPPUCCIN tema
	{ "catppuccin/nvim", name = "catppuccin", priority = 1000 },
	{
		-- :NEOTREE
		"nvim-neo-tree/neo-tree.nvim",
		branch = "v3.x",
		dependencies = {
		"nvim-lua/plenary.nvim",
		"nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
		"MunifTanjim/nui.nvim",
		}
	},
	{
		-- :LUALINE
		'nvim-lualine/lualine.nvim',
		dependencies = { 'nvim-tree/nvim-web-devicons' }
	},
	{
		"karb94/neoscroll.nvim",
		config = function ()
			require('neoscroll').setup({
				mappings = {                 -- Keys to be mapped to their corresponding default scrolling animation
					'<C-u>', '<C-d>',
					'<C-b>', '<C-f>',
					'<C-y>', '<C-e>',
					'zt', 'zz', 'zb',
				},
				hide_cursor = true,          -- Hide cursor while scrolling
				stop_eof = true,             -- Stop at <EOF> when scrolling downwards
				respect_scrolloff = false,   -- Stop scrolling when the cursor reaches the scrolloff margin of the file
				cursor_scrolls_alone = true, -- The cursor will keep on scrolling even if the window cannot scroll further
				easing = 'linear',           -- Default easing function
				pre_hook = nil,              -- Function to run before the scrolling animation starts
				post_hook = nil,             -- Function to run after the scrolling animation ends
				performance_mode = false,    -- Disable "Performance Mode" on all buffers.
				ignored_events = {           -- Events ignored while scrolling
					'WinScrolled', 'CursorMoved'
				},
			})
		end
	},
	{
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		config = function () 
		local configs = require("nvim-treesitter.configs")

		configs.setup({
			ensure_installed = { "c",  "vim", "vimdoc", "query", "cpp", "python", "css", "javascript", "html" },
			sync_install = false,
			highlight = { enable = true },
			indent = { enable = true },  
		})
		end
	},
	{
		"hrsh7th/nvim-cmp",
		dependencies = {
			"hrsh7th/cmp-buffer",
			"hrsh7th/cmp-path",
			"hrsh7th/cmp-nvim-lsp",
			"hrsh7th/cmp-cmdline",
			"hrsh7th/cmp-git",
			"L3MON4D3/LuaSnip",
			"saadparwaiz1/cmp_luasnip",
			"windwp/nvim-autopairs",
		},
		event = "VeryLazy",
		main = "config.plugins.cmp",
		config = true,
	}
}


-- Instalacion de plugins
require("lazy").setup(plugins)
require('lualine').setup{
	options = { theme = 'catppuccin-mocha' }
}

vim.wo.relativenumber = true
vim.wo.number = true

local set = vim.opt -- set options

set.tabstop = 4
set.softtabstop = 4
set.shiftwidth = 4

vim.g.mapleader = " "
vim.g.maplocalleader = "\\"

vim.keymap.set("n", "<Tab>", vim.cmd.bnext)
vim.keymap.set("n", "<S-Tab>", vim.cmd.bprevious)

vim.keymap.set("n", "<Leader>/", ':nohls', {silent = true})
vim.keymap.set("n", "<Leader>v", '"+P')
vim.keymap.set("v", "<Leader>c", '"+y')
vim.keymap.set("n", "<Leader>s", ':w', {silent=true})
vim.keymap.set("n", "<Leader>S", ':wa', {silent=true})
vim.keymap.set("n", "<Leader>e", ':Neotree toggle<CR>', {silent=true})

-- local builtin = require('telescope.builtin')
-- vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
-- vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })

vim.cmd.colorscheme "catppuccin-mocha"
